name: Build and Deploy Teedy front-end

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (staging or production)'
        required: true
        type: string
    secrets:
      # Staging secrets
      SSH_PRIVATE_KEY_STAGING:
        required: false
      SSH_USER_STAGING:
        required: false
      SERVER_HOST_STAGING:
        required: false
      PROJECT_PATH_STAGING:
        required: false
      # Production secrets
      SSH_PRIVATE_KEY_PROD:
        required: false
      SSH_USER_PROD:
        required: false
      SERVER_HOST_PROD:
        required: false
      PROJECT_PATH_PROD:
        required: false
      # Common secrets
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          if [ "${{ inputs.environment }}" = "staging" ]; then
            if [ -z "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" ] || \
               [ -z "${{ secrets.SSH_USER_STAGING }}" ] || \
               [ -z "${{ secrets.SERVER_HOST_STAGING }}" ] || \
               [ -z "${{ secrets.PROJECT_PATH_STAGING }}" ]; then
              echo "Missing required staging secrets"
              exit 1
            fi
          else
            if [ -z "${{ secrets.SSH_PRIVATE_KEY_PROD }}" ] || \
               [ -z "${{ secrets.SSH_USER_PROD }}" ] || \
               [ -z "${{ secrets.SERVER_HOST_PROD }}" ] || \
               [ -z "${{ secrets.PROJECT_PATH_PROD }}" ]; then
              echo "Missing required production secrets"
              exit 1
            fi
          fi

  build:
    needs: validate-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.4'

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ inputs.environment == 'staging' && secrets.SSH_PRIVATE_KEY_STAGING || secrets.SSH_PRIVATE_KEY_PROD }}

      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }} >> ~/.ssh/known_hosts

      - name: Set locale and environment
        run: |
          sudo locale-gen en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV

      - name: Build application
        env:
          SSH_USER: ${{ inputs.environment == 'staging' && secrets.SSH_USER_STAGING || secrets.SSH_USER_PROD }}
          SERVER_HOST: ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }}
          PROJECT_PATH: ${{ inputs.environment == 'staging' && secrets.PROJECT_PATH_STAGING || secrets.PROJECT_PATH_PROD }}
          LANG: en_US.UTF-8
          LC_ALL: en_US.UTF-8
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_HOST "export LANG=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && bash -l -c 'mkdir -p $PROJECT_PATH && cd $PROJECT_PATH && git pull && npm ci && npm run build:prod && mkdir -p dist public www && cp public/.htaccess dist/ && cp public/robots.txt dist/ && if [ \"\$(git rev-parse --abbrev-ref HEAD)\" = \"main\" ] && [ -f www/sitemap.xml ]; then cp www/sitemap.xml dist/; fi'"

          if [ "${{ inputs.environment }}" = "production" ]; then
            ssh $SSH_USER@$SERVER_HOST "echo '‚ö†Ô∏è Remember to verify robots.txt configuration for production environment'"
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ inputs.environment == 'staging' && secrets.SSH_PRIVATE_KEY_STAGING || secrets.SSH_PRIVATE_KEY_PROD }}

      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }} >> ~/.ssh/known_hosts

      - name: Set locale and environment
        run: |
          sudo locale-gen en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV

      - name: Deploy to server
        env:
          SSH_USER: ${{ inputs.environment == 'staging' && secrets.SSH_USER_STAGING || secrets.SSH_USER_PROD }}
          SERVER_HOST: ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }}
          PROJECT_PATH: ${{ inputs.environment == 'staging' && secrets.PROJECT_PATH_STAGING || secrets.PROJECT_PATH_PROD }}
          LANG: en_US.UTF-8
          LC_ALL: en_US.UTF-8
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_HOST "export LANG=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && bash -l -c 'cd $PROJECT_PATH && mkdir -p www dist && if [ \"\$(git rev-parse --abbrev-ref HEAD)\" = \"main\" ] && [ -f www/sitemap.xml ]; then cp www/sitemap.xml dist/; fi && rm -rf wwwbkp && mv www wwwbkp && mv dist www'"

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Clean commit message
        id: clean_message
        run: |
          CLEAN_COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | sed ':a;N;$!ba;s/\n/ /g' | sed 's/"/\\"/g')
          echo "clean_commit_message=$CLEAN_COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Send notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "TEEDY - *${{ needs.build.result == 'success' && '‚úÖ Build Success for ' || '‚ùå Build Failed for ' }}${{ inputs.environment }} environment*\n\n*Environment Details:*\n‚Ä¢ Environment: *${{ inputs.environment }}*\n‚Ä¢ Repository: *${{ github.repository }}*\n‚Ä¢ Branch: *${{ github.ref_name }}*\n\n*Commit Information:*\n‚Ä¢ Message: ${{ env.clean_commit_message }}\n‚Ä¢ Author: ${{ github.event.head_commit.author.name }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîç View Workflow Run>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
