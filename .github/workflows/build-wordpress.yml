name: Workflow WordPress R√©utilisable

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environnement cible (staging ou production)'
        required: true
        type: string
    secrets:
      # Secrets de staging
      SSH_PRIVATE_KEY_STAGING:
        required: false
      SSH_USER_STAGING:
        required: false
      SERVER_HOST_STAGING:
        required: false
      PROJECT_PATH_STAGING:
        required: false
      # Secrets de production
      SSH_PRIVATE_KEY_PROD:
        required: false
      SSH_USER_PROD:
        required: false
      SERVER_HOST_PROD:
        required: false
      PROJECT_PATH_PROD:
        required: false
      # Secrets communs
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: V√©rification des secrets requis
        shell: bash
        run: |
          if [ "${{ inputs.environment }}" = "staging" ]; then
            if [ -z "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" ] || \
               [ -z "${{ secrets.SSH_USER_STAGING }}" ] || \
               [ -z "${{ secrets.SERVER_HOST_STAGING }}" ] || \
               [ -z "${{ secrets.PROJECT_PATH_STAGING }}" ]; then
              echo "Secrets de staging manquants"
              exit 1
            fi
          else
            if [ -z "${{ secrets.SSH_PRIVATE_KEY_PROD }}" ] || \
               [ -z "${{ secrets.SSH_USER_PROD }}" ] || \
               [ -z "${{ secrets.SERVER_HOST_PROD }}" ] || \
               [ -z "${{ secrets.PROJECT_PATH_PROD }}" ]; then
              echo "Secrets de production manquants"
              exit 1
            fi
          fi

  build:
    needs: validate-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Capture de l'heure de d√©but
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      - name: D√©finition des variables d'environnement
        id: env
        shell: bash
        run: |
          if [ "${{ inputs.environment }}" = "staging" ]; then
            echo "build_command=dev" >> $GITHUB_OUTPUT
          else 
            echo "build_command=build" >> $GITHUB_OUTPUT
          fi

      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Cache des modules Node.js
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configuration de la cl√© SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ inputs.environment == 'staging' && secrets.SSH_PRIVATE_KEY_STAGING || secrets.SSH_PRIVATE_KEY_PROD }}

      - name: D√©ploiement et build
        shell: bash
        env:
          SSH_USER: ${{ inputs.environment == 'staging' && secrets.SSH_USER_STAGING || secrets.SSH_USER_PROD }}
          SERVER_HOST: ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }}
          PROJECT_PATH: ${{ inputs.environment == 'staging' && secrets.PROJECT_PATH_STAGING || secrets.PROJECT_PATH_PROD }}
        run: |
          # On ex√©cute explicitement sous bash c√¥t√© serveur, sans sourcer zsh
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_HOST" /bin/bash -lc "
            set -euo pipefail

            cd \"$PROJECT_PATH\"

            # Git √† jour
            git fetch --all --prune
            git pull --ff-only || true

            # package.json a-t-il chang√© ? (tol√©rant au 1er d√©ploiement)
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              PKG_CHANGED=\$(git diff --name-only HEAD~1 -- package.json || true)
            else
              PKG_CHANGED=\"\"
            fi

            # Choix install: ci si lockfile, sinon install
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              INSTALL_CMD=\"npm ci\"
            else
              echo '‚ö†Ô∏è  Aucun lockfile ‚Üí fallback npm install'
              INSTALL_CMD=\"npm install\"
            fi

            # Installer seulement si n√©cessaire
            if [ ! -d node_modules ] || [ -n \"\$PKG_CHANGED\" ]; then
              echo \"üì¶ \$INSTALL_CMD\"
              \$INSTALL_CMD
            else
              echo '‚úÖ D√©pendances OK (node_modules pr√©sent, package.json inchang√©)'
            fi

            # Build
            npm run ${{ steps.env.outputs.build_command }}
          "

  notify-success:
    if: success()
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Calcul de la dur√©e et de la date
        run: |
          echo "duration=$(( $(date +%s) - $start_time ))" >> $GITHUB_ENV
          echo "deploy_date=$(date '+%d/%m/%Y %H:%M')" >> $GITHUB_ENV

      - name: Nettoyage du message de commit
        id: clean_message
        run: |
          CLEAN_COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | sed ':a;N;$!ba;s/\n/ /g' | sed 's/"/\\"/g')
          echo "clean_commit_message=$CLEAN_COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Envoi de notification de succ√®s √† Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "WORDPRESS - *${{ github.repository }}* \n\n *‚úÖ Build r√©ussi pour l'environnement ${{ inputs.environment == 'staging' && ':construction:' || ':rocket:' }} ${{ inputs.environment }}*\n\n*D√©tails de l'environnement:*\n‚Ä¢ Environnement: *${{ inputs.environment }}*\n‚Ä¢ Application: *${{ github.repository }}*\n‚Ä¢ D√©p√¥t: *${{ github.repository }}*\n‚Ä¢ Branche: *${{ github.ref_name }}*\n‚Ä¢ D√©clench√© par: *${{ github.actor }}*\n‚Ä¢ Date de d√©ploiement: *${{ env.deploy_date }}*\n‚Ä¢ Timeout: *15 minutes*\n\n*Informations du commit:*\n‚Ä¢ Message: ${{ env.clean_commit_message }}\n‚Ä¢ Auteur: ${{ github.event.head_commit.author.name }}\n‚Ä¢ Commit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n\n*Dur√©e:* *${{ env.duration }} secondes*\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîç Voir l'ex√©cution du workflow>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    if: failure()
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Calcul de la date
        run: echo "deploy_date=$(date '+%d/%m/%Y %H:%M')" >> $GITHUB_ENV

      - name: Envoi de notification d'√©chec √† Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "WORDPRESS - *${{ github.repository }}* \n\n üö® *D√©ploiement √©chou√© pour l'environnement ${{ inputs.environment == 'staging' && ':construction:' || ':rocket:' }} ${{ inputs.environment }}*\n\n*D√©tails de l'environnement:*\n‚Ä¢ Environnement: *${{ inputs.environment }}*\n‚Ä¢ Application: *${{ github.repository }}*\n‚Ä¢ D√©p√¥t: *${{ github.repository }}*\n‚Ä¢ Branche: *${{ github.ref_name }}*\n‚Ä¢ D√©clench√© par: *${{ github.actor }}*\n‚Ä¢ Date de d√©ploiement: *${{ env.deploy_date }}*\n‚Ä¢ Job √©chou√©: *build*\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîç Voir l'ex√©cution du workflow>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}