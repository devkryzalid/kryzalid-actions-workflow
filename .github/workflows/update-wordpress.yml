name: Update WordPress

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: 'production'

jobs:
  update-wordpress:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wp
          MYSQL_USER: wp
          MYSQL_PASSWORD: wp
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      # Get the current WordPress version from the repository before doing anything
      - name: Get current WordPress version from repository
        id: get_wp_version
        run: |
          if [ -f "wp-includes/version.php" ]; then
            OLD_VERSION=$(grep "wp_version = " wp-includes/version.php | cut -d "'" -f 2)
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_OUTPUT
            echo "Found WordPress version in repository: $OLD_VERSION"
          else
            echo "OLD_VERSION=unknown" >> $GITHUB_OUTPUT
            echo "No WordPress version found in repository"
          fi

      - name: Set up WordPress test site
        run: |
          wp core download --force
          wp config create \
            --dbname=wp \
            --dbuser=wp \
            --dbpass=wp \
            --dbhost=127.0.0.1 \
            --skip-check
          wp core install \
            --url=example.com \
            --title="Test Site" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=admin@example.com
        env:
          WP_CLI_ALLOW_ROOT: true

      - name: Update WordPress core
        run: wp core update
        env:
          WP_CLI_ALLOW_ROOT: true

      - name: Get new WordPress version (after update)
        id: new_wp_version
        run: echo "NEW_VERSION=$(wp core version)" >> $GITHUB_OUTPUT
        env:
          WP_CLI_ALLOW_ROOT: true

      - name: Create update branch
        run: |
          BRANCH_NAME="update/wp-${{ steps.get_wp_version.outputs.OLD_VERSION }}-to-${{ steps.new_wp_version.outputs.NEW_VERSION }}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # Commit uniquement si la version a changÃ©
      - name: Commit WordPress core update (if changed)
        run: |
          if [ "${{ steps.get_wp_version.outputs.OLD_VERSION }}" != "${{ steps.new_wp_version.outputs.NEW_VERSION }}" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "update WordPress from ${{ steps.get_wp_version.outputs.OLD_VERSION }} to ${{ steps.new_wp_version.outputs.NEW_VERSION }}"
          else
            echo "WordPress core version unchanged, no commit."
          fi

      - name: List plugins in wp-content/plugins
        id: plugin_list
        run: |
          # Only list plugins that exist in wp-content/plugins directory (skip default WP plugins)
          > plugin_list.txt
          if [ -d "wp-content/plugins" ]; then
            for plugin_dir in wp-content/plugins/*/; do
              if [ -d "$plugin_dir" ]; then
                plugin_name=$(basename "$plugin_dir")
                # Skip default WordPress plugins
                if [ "$plugin_name" != "akismet" ] && [ "$plugin_name" != "hello" ]; then
                  # Check if plugin is actually installed and recognized by wp-cli
                  if wp plugin get "$plugin_name" --field=name > /dev/null 2>&1; then
                    echo "$plugin_name" >> plugin_list.txt
                  fi
                fi
              fi
            done
          fi
        env:
          WP_CLI_ALLOW_ROOT: true

      - name: Update plugins one by one
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -s plugin_list.txt ]; then
            while read -r plugin; do
              if [ -n "$plugin" ]; then
                OLD_VERSION=$(wp plugin get "$plugin" --field=version)
                wp plugin update "$plugin"
                NEW_VERSION=$(wp plugin get "$plugin" --field=version)
                if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
                  git add .
                  git commit -m "update plugin '$plugin' from $OLD_VERSION to $NEW_VERSION"
                fi
              fi
            done < plugin_list.txt
          else
            echo "No plugins found in wp-content/plugins to update"
          fi
        env:
          WP_CLI_ALLOW_ROOT: true

      - name: Clean up temporary files
        run: |
          rm -f plugin_list.txt update-summary.txt

      - name: Push branch
        run: git push origin "$BRANCH_NAME"
