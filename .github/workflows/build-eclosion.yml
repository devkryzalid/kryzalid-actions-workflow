name: Build et D√©ploiement Projet Angular

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environnement cible (staging ou production)'
        required: true
        type: string
    secrets:
      # Secrets de staging
      SSH_PRIVATE_KEY_STAGING:
        required: false
      SSH_USER_STAGING:
        required: false
      SERVER_HOST_STAGING:
        required: false
      PROJECT_PATH_STAGING:
        required: false
      # Secrets de production
      SSH_PRIVATE_KEY_PROD:
        required: false
      SSH_USER_PROD:
        required: false
      SERVER_HOST_PROD:
        required: false
      PROJECT_PATH_PROD:
        required: false
      # Secrets communs
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: V√©rification des secrets requis
        run: |
          if [ "${{ inputs.environment }}" = "staging" ]; then
            if [ -z "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" ] || \
               [ -z "${{ secrets.SSH_USER_STAGING }}" ] || \
               [ -z "${{ secrets.SERVER_HOST_STAGING }}" ] || \
               [ -z "${{ secrets.PROJECT_PATH_STAGING }}" ]; then
              echo "Secrets de staging manquants"
              exit 1
            fi
          else
            if [ -z "${{ secrets.SSH_PRIVATE_KEY_PROD }}" ] || \
               [ -z "${{ secrets.SSH_USER_PROD }}" ] || \
               [ -z "${{ secrets.SERVER_HOST_PROD }}" ] || \
               [ -z "${{ secrets.PROJECT_PATH_PROD }}" ]; then
              echo "Secrets de production manquants"
              exit 1
            fi
          fi

  build:
    needs: validate-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Capture de l'heure de d√©but
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.14.0'

      - name: Configuration de la cl√© SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ inputs.environment == 'staging' && secrets.SSH_PRIVATE_KEY_STAGING || secrets.SSH_PRIVATE_KEY_PROD }}

      - name: Configuration des h√¥tes SSH connus
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }} >> ~/.ssh/known_hosts

      - name: Configuration des param√®tres r√©gionaux et de l'environnement
        shell: bash
        run: |
          sudo locale-gen en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV

      - name: D√©ploiement et build
        shell: bash
        env:
          SSH_USER: ${{ inputs.environment == 'staging' && secrets.SSH_USER_STAGING || secrets.SSH_USER_PROD }}
          SERVER_HOST: ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }}
          PROJECT_PATH: ${{ inputs.environment == 'staging' && secrets.PROJECT_PATH_STAGING || secrets.PROJECT_PATH_PROD }}
          LANG: en_US.UTF-8
          LC_ALL: en_US.UTF-8
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_HOST "export LANG=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && bash -c 'mkdir -p $PROJECT_PATH && source ~/.zshrc && cd $PROJECT_PATH && git pull && npm ci && node_modules/@angular/cli/bin/ng.js build --configuration production && mkdir -p dist public www && cp public/.htaccess dist/ && cp public/robots.txt dist/ && if [ \"\$(git rev-parse --abbrev-ref HEAD)\" = \"main\" ] && [ -f www/sitemap.xml ]; then cp www/sitemap.xml dist/; fi'"

          if [ "${{ inputs.environment }}" = "production" ]; then
            ssh $SSH_USER@$SERVER_HOST "echo '‚ö†Ô∏è Remember to verify robots.txt configuration for production environment'"
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configuration de la cl√© SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ inputs.environment == 'staging' && secrets.SSH_PRIVATE_KEY_STAGING || secrets.SSH_PRIVATE_KEY_PROD }}

      - name: Configuration des h√¥tes SSH connus
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }} >> ~/.ssh/known_hosts

      - name: Configuration des param√®tres r√©gionaux et de l'environnement
        shell: bash
        run: |
          sudo locale-gen en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV

      - name: D√©ploiement sur le serveur
        shell: bash
        env:
          SSH_USER: ${{ inputs.environment == 'staging' && secrets.SSH_USER_STAGING || secrets.SSH_USER_PROD }}
          SERVER_HOST: ${{ inputs.environment == 'staging' && secrets.SERVER_HOST_STAGING || secrets.SERVER_HOST_PROD }}
          PROJECT_PATH: ${{ inputs.environment == 'staging' && secrets.PROJECT_PATH_STAGING || secrets.PROJECT_PATH_PROD }}
          LANG: en_US.UTF-8
          LC_ALL: en_US.UTF-8
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_HOST "export LANG=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && bash -c 'cd $PROJECT_PATH && mkdir -p www dist && if [ \"\$(git rev-parse --abbrev-ref HEAD)\" = \"main\" ] && [ -f www/sitemap.xml ]; then cp www/sitemap.xml dist/; fi && rm -rf wwwbkp && mv www wwwbkp && mv dist www'"

  notify-success:
    if: success()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Calcul de la dur√©e et de la date
        run: |
          echo "duration=$(( $(date +%s) - $start_time ))" >> $GITHUB_ENV
          echo "deploy_date=$(date '+%d/%m/%Y %H:%M')" >> $GITHUB_ENV

      - name: Nettoyage du message de commit
        run: |
          CLEAN_COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | sed ':a;N;$!ba;s/\n/ /g' | sed 's/"/\\"/g')
          echo "clean_commit_message=$CLEAN_COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Notification de succ√®s sur Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "ANGULAR - *${{ github.repository }}* \n\n *‚úÖ Build et d√©ploiement r√©ussis pour l'environnement ${{ inputs.environment == 'staging' && ':construction:' || ':rocket:' }} ${{ inputs.environment }}*\n\n*D√©tails :*\n‚Ä¢ Environnement : *${{ inputs.environment }}*\n‚Ä¢ D√©p√¥t : *${{ github.repository }}*\n‚Ä¢ Branche : *${{ github.ref_name }}*\n‚Ä¢ D√©clench√© par : *${{ github.actor }}*\n‚Ä¢ Date : *${{ env.deploy_date }}*\n‚Ä¢ Timeout : *15 minutes*\n\n*Commit :*\n‚Ä¢ Message : ${{ env.clean_commit_message }}\n‚Ä¢ Auteur : ${{ github.event.head_commit.author.name }}\n‚Ä¢ Commit : <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n\n*Dur√©e :* *${{ env.duration }} secondes*\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîç Voir le workflow>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    if: failure()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Calcul de la date
        run: echo "deploy_date=$(date '+%d/%m/%Y %H:%M')" >> $GITHUB_ENV

      - name: Notification d'√©chec sur Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "ANGULAR - *${{ github.repository }}* \n\n üö® *√âchec du d√©ploiement pour l'environnement ${{ inputs.environment == 'staging' && ':construction:' || ':rocket:' }} ${{ inputs.environment }}*\n\n*D√©tails :*\n‚Ä¢ Environnement : *${{ inputs.environment }}*\n‚Ä¢ D√©p√¥t : *${{ github.repository }}*\n‚Ä¢ Branche : *${{ github.ref_name }}*\n‚Ä¢ D√©clench√© par : *${{ github.actor }}*\n‚Ä¢ Date : *${{ env.deploy_date }}*\n‚Ä¢ Job √©chou√© : *build ou deploy*\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîç Voir le workflow>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}